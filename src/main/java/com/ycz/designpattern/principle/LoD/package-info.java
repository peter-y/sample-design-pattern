/**
 * <b>迪米特法则</b>一个软件实体应当尽可能少地与其他实体发生相互作用<br>
 * 某个模块儿的修改尽量少的影响其他模块儿。限制实体之间通信的宽度和深度，降低耦合度<br>
 * 定义形式<br>
 * <ul>
 * <li>不要和陌生人说话</li>
 * <li>只和直接朋友通信</li>
 * </ul>
 * 直接朋友的定义<br>
 * <ul>
 * <li>this 当前对象本身</li>
 * <li>以参数形式传入到当前对象方法的对象</li>
 * <li>当前对象的成员对象</li>
 * <li>如果当前对象的成员对象是一个集合，那么集合中的元素也都是朋友</li>
 * <li>当前对象所创建的对象</li>
 * </ul>
 * <b>思想理解：</b>尽量减少对象之间的交互，如果两个对象不必直接通信，那么就不应该发生任何直接的相互作用。<br>
 * 如果其中一个对象需要调用另外对象的某个方法的时候，可以通过第三者转发调用(代理吗)<br>
 * 通过引入一个合理的第三者来减少耦合<br>
 */
package com.ycz.designpattern.principle.LoD;